definitions:
  dto.AssignmentCreateRequest:
    properties:
      assetId:
        type: integer
      departmentId:
        type: integer
      userId:
        type: integer
    required:
    - assetId
    type: object
  dto.CheckPasswordReset:
    properties:
      email:
        type: string
      redirectUrl:
        type: string
    required:
    - email
    - redirectUrl
    type: object
  dto.CreateCategoryRequest:
    properties:
      categoryName:
        type: string
    required:
    - categoryName
    type: object
  dto.CreateDepartmentRequest:
    properties:
      departmentName:
        type: string
      locationId:
        type: integer
    required:
    - departmentName
    - locationId
    type: object
  dto.CreateLocationRequest:
    properties:
      locationName:
        type: string
    required:
    - locationName
    type: object
  dto.CreateMaintenanceSchedulesRequest:
    properties:
      assetId:
        type: integer
      endDate:
        type: string
      startDate:
        type: string
    required:
    - assetId
    - endDate
    - startDate
    type: object
  dto.CreateRequestTransferRequest:
    properties:
      assetId:
        type: integer
      departmentId:
        type: integer
    required:
    - assetId
    - departmentId
    type: object
  dto.RefreshRequest:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  dto.UpdateInformationUserRequest:
    properties:
      firstName:
        type: string
      lastName:
        type: string
    required:
    - firstName
    - lastName
    type: object
  dto.UpdateRoleUserRequest:
    properties:
      roleTitle:
        type: string
    required:
    - roleTitle
    type: object
  dto.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserRegisterRequest:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      redirectUrl:
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - redirectUrl
    type: object
  dto.UserRequestResetPassword:
    properties:
      newPassword:
        type: string
      token:
        type: string
    required:
    - newPassword
    - token
    type: object
info:
  contact: {}
paths:
  /api/assets:
    get:
      consumes:
      - application/json
      description: Get all assets
      produces:
      - application/json
      responses: {}
      summary: Get all assets
      tags:
      - assets
    post:
      consumes:
      - multipart/form-data
      description: Create assets
      parameters:
      - description: Asset Name
        in: formData
        name: assetName
        required: true
        type: string
      - description: Purchase Date (RFC3339 format, e.g. 2023-04-15T10:00:00Z)
        in: formData
        name: purchaseDate
        required: true
        type: string
      - description: Cost
        in: formData
        name: cost
        required: true
        type: number
      - description: Warranty Expiry (RFC3339 format, e.g. 2023-12-31T23:59:59Z)
        in: formData
        name: warrantExpiry
        required: true
        type: string
      - description: Serial Number
        in: formData
        name: serialNumber
        required: true
        type: string
      - description: Category ID
        in: formData
        name: categoryId
        required: true
        type: integer
      - description: Department ID
        in: formData
        name: departmentId
        required: true
        type: integer
      - description: redirect url
        in: formData
        name: redirectUrl
        required: true
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Image to upload
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses: {}
      summary: Create assets
      tags:
      - assets
  /api/assets-log/{asset_id}:
    get:
      consumes:
      - application/json
      description: Get assets log by id
      parameters:
      - description: id
        in: path
        name: asset_id
        required: true
        type: string
      - in: query
        name: assetName
        type: string
      - in: query
        name: categoryId
        type: string
      - in: query
        name: cost
        type: string
      - in: query
        name: departmentId
        type: string
      - in: query
        name: email
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: serialNumber
        type: string
      - in: query
        name: status
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get assets log by id
      tags:
      - Assets log
  /api/assets-retired/{id}:
    patch:
      consumes:
      - application/json
      description: Retired assets
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Retired assets
      tags:
      - assets
  /api/assets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete assets
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete assets
      tags:
      - assets
    get:
      consumes:
      - application/json
      description: Get assets
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get assets
      tags:
      - assets
    put:
      consumes:
      - multipart/form-data
      description: Update assets
      parameters:
      - description: Asset Name
        in: formData
        name: assetName
        required: true
        type: string
      - description: Purchase Date (RFC3339 format, e.g. 2023-04-15T10:00:00Z)
        in: formData
        name: purchaseDate
        required: true
        type: string
      - description: Cost
        in: formData
        name: cost
        required: true
        type: number
      - description: Warranty Expiry (RFC3339 format, e.g. 2023-12-31T23:59:59Z)
        in: formData
        name: warrantExpiry
        required: true
        type: string
      - description: Maintenance (RFC3339 format, e.g. 2023-12-31T23:59:59Z)
        in: formData
        name: maintenance
        required: true
        type: string
      - description: Serial Number
        in: formData
        name: serialNumber
        required: true
        type: string
      - description: Serial Number
        in: formData
        name: status
        required: true
        type: string
      - description: Category ID
        in: formData
        name: categoryId
        required: true
        type: integer
      - description: Department ID
        in: formData
        name: departmentId
        required: true
        type: integer
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Image to upload
        in: formData
        name: image
        required: true
        type: file
      - description: expectDayMaintenance Date (RFC3339 format, e.g. 2023-04-15T10:00:00Z)
        in: formData
        name: expectDayMaintenance
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Update assets
      tags:
      - assets
  /api/assets/filter:
    get:
      consumes:
      - application/json
      description: Get all assets have permission
      parameters:
      - in: query
        name: assetName
        type: string
      - in: query
        name: categoryId
        type: string
      - in: query
        name: cost
        type: string
      - in: query
        name: departmentId
        type: string
      - in: query
        name: email
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: serialNumber
        type: string
      - in: query
        name: status
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get all assets with filter
      tags:
      - assets
  /api/assignment:
    post:
      consumes:
      - application/json
      description: Create assignment
      parameters:
      - description: Data
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/dto.AssignmentCreateRequest'
      produces:
      - application/json
      responses: {}
      summary: Create assignment
      tags:
      - Assignments
  /api/assignment/{id}:
    put:
      consumes:
      - application/json
      description: Update assignment
      parameters:
      - description: Data
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/dto.AssignmentCreateRequest'
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Update assignment
      tags:
      - Assignments
  /api/assignment/filter:
    get:
      consumes:
      - application/json
      description: Get all assign have permission
      parameters:
      - in: query
        name: emailAssign
        type: string
      - in: query
        name: emailAssigned
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: page
        type: integer
      - in: query
        name: status
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get all assign with filter
      tags:
      - Assignments
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses: {}
      summary: Login
      tags:
      - auth
  /api/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses: {}
      summary: Logout
      tags:
      - auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh Token
      parameters:
      - description: Data
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequest'
      produces:
      - application/json
      responses: {}
      summary: Refresh Token
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses: {}
      summary: Register user
      tags:
      - auth
  /api/categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      produces:
      - application/json
      responses: {}
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create categories
      parameters:
      - description: Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCategoryRequest'
      produces:
      - application/json
      responses: {}
      summary: Create categories
      tags:
      - categories
  /api/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category via id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete category
      tags:
      - categories
  /api/departments:
    get:
      consumes:
      - application/json
      description: Get all departments
      produces:
      - application/json
      responses: {}
      summary: Get all departments
      tags:
      - departments
    post:
      consumes:
      - application/json
      description: Create departments
      parameters:
      - description: Data
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDepartmentRequest'
      produces:
      - application/json
      responses: {}
      summary: Create departments
      tags:
      - departments
  /api/departments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete department via id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete department
      tags:
      - departments
  /api/locations:
    get:
      consumes:
      - application/json
      description: Get all location
      produces:
      - application/json
      responses: {}
      summary: Get all location
      tags:
      - locations
    post:
      consumes:
      - application/json
      description: Create location
      parameters:
      - description: Data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/dto.CreateLocationRequest'
      produces:
      - application/json
      responses: {}
      summary: Create Location
      tags:
      - locations
  /api/locations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete location via id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete location
      tags:
      - locations
  /api/maintenance-schedules:
    post:
      consumes:
      - application/json
      description: Create maintenanceSchedules
      parameters:
      - description: Data
        in: body
        name: MaintenanceSchedules
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMaintenanceSchedulesRequest'
      produces:
      - application/json
      responses: {}
      summary: Create maintenanceSchedules
      tags:
      - MaintenanceScheduless
  /api/maintenance-schedules/{id}:
    get:
      consumes:
      - application/json
      description: Get maintenanceSchedules
      parameters:
      - description: asset_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get maintenanceSchedules by assetId
      tags:
      - MaintenanceScheduless
  /api/request-transfer/{id}:
    post:
      consumes:
      - application/json
      description: Request Transfer
      parameters:
      - description: Data
        in: body
        name: Request-Transfer
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRequestTransferRequest'
      - description: project_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Request Transfer
      tags:
      - RequestTransfer
  /api/roles:
    get:
      consumes:
      - application/json
      description: GetRole
      produces:
      - application/json
      responses: {}
      summary: GetRole
      tags:
      - roles
  /api/user/{email}:
    delete:
      consumes:
      - application/json
      description: Delete user via email
      parameters:
      - description: email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete user
      tags:
      - users
  /api/user/forget-password:
    post:
      consumes:
      - application/json
      description: Email reset password
      parameters:
      - description: Data
        in: body
        name: Email_Reset_Password
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPasswordReset'
      produces:
      - application/json
      responses: {}
      summary: Email reset password
      tags:
      - users
  /api/user/information:
    patch:
      consumes:
      - application/json
      description: Update Information
      parameters:
      - description: Data
        in: body
        name: Information
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateInformationUserRequest'
      produces:
      - application/json
      responses: {}
      summary: Update Information
      tags:
      - users
  /api/user/password-reset:
    patch:
      consumes:
      - application/json
      description: reset password
      parameters:
      - description: Data
        in: body
        name: Password-reset
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequestResetPassword'
      produces:
      - application/json
      responses: {}
      summary: Password-reset
      tags:
      - users
  /api/user/role:
    patch:
      consumes:
      - application/json
      description: Update Role
      parameters:
      - description: Data
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRoleUserRequest'
      produces:
      - application/json
      responses: {}
      summary: Update Role
      tags:
      - roles
  /api/user/session:
    get:
      consumes:
      - application/json
      description: Get session
      produces:
      - application/json
      responses: {}
      summary: Get session
      tags:
      - users
  /api/users:
    get:
      consumes:
      - application/json
      description: Get all user
      produces:
      - application/json
      responses: {}
      summary: Get all user
      tags:
      - users
swagger: "2.0"
