// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "BE_Manage_device/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *NotificationRepository) Create(_a0 *entity.Notifications) (*entity.Notifications, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Notifications
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Notifications) (*entity.Notifications, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Notifications) *entity.Notifications); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Notifications)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Notifications) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationsByUserId provides a mock function with given fields: userId
func (_m *NotificationRepository) GetNotificationsByUserId(userId int64) ([]*entity.Notifications, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsByUserId")
	}

	var r0 []*entity.Notifications
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*entity.Notifications, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int64) []*entity.Notifications); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Notifications)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: id
func (_m *NotificationRepository) UpdateStatus(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
