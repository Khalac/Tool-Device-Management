// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "BE_Manage_device/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MaintenanceSchedulesRepository is an autogenerated mock type for the MaintenanceSchedulesRepository type
type MaintenanceSchedulesRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *MaintenanceSchedulesRepository) Create(_a0 *entity.MaintenanceSchedules) (*entity.MaintenanceSchedules, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.MaintenanceSchedules
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.MaintenanceSchedules) (*entity.MaintenanceSchedules, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.MaintenanceSchedules) *entity.MaintenanceSchedules); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MaintenanceSchedules)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.MaintenanceSchedules) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MaintenanceSchedulesRepository) Delete(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMaintenanceSchedules provides a mock function with no fields
func (_m *MaintenanceSchedulesRepository) GetAllMaintenanceSchedules() ([]*entity.MaintenanceSchedules, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMaintenanceSchedules")
	}

	var r0 []*entity.MaintenanceSchedules
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entity.MaintenanceSchedules, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entity.MaintenanceSchedules); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.MaintenanceSchedules)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMaintenanceSchedulesByAssetId provides a mock function with given fields: assetId
func (_m *MaintenanceSchedulesRepository) GetAllMaintenanceSchedulesByAssetId(assetId int64) ([]*entity.MaintenanceSchedules, error) {
	ret := _m.Called(assetId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMaintenanceSchedulesByAssetId")
	}

	var r0 []*entity.MaintenanceSchedules
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*entity.MaintenanceSchedules, error)); ok {
		return rf(assetId)
	}
	if rf, ok := ret.Get(0).(func(int64) []*entity.MaintenanceSchedules); ok {
		r0 = rf(assetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.MaintenanceSchedules)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(assetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaintenanceSchedulesById provides a mock function with given fields: id
func (_m *MaintenanceSchedulesRepository) GetMaintenanceSchedulesById(id int64) (*entity.MaintenanceSchedules, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetMaintenanceSchedulesById")
	}

	var r0 *entity.MaintenanceSchedules
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.MaintenanceSchedules, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.MaintenanceSchedules); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MaintenanceSchedules)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, startDate, endDate
func (_m *MaintenanceSchedulesRepository) Update(id int64, startDate time.Time, endDate time.Time) (*entity.MaintenanceSchedules, error) {
	ret := _m.Called(id, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.MaintenanceSchedules
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, time.Time, time.Time) (*entity.MaintenanceSchedules, error)); ok {
		return rf(id, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(int64, time.Time, time.Time) *entity.MaintenanceSchedules); ok {
		r0 = rf(id, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MaintenanceSchedules)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, time.Time, time.Time) error); ok {
		r1 = rf(id, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMaintenanceSchedulesRepository creates a new instance of MaintenanceSchedulesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMaintenanceSchedulesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MaintenanceSchedulesRepository {
	mock := &MaintenanceSchedulesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
