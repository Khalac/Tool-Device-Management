// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "BE_Manage_device/internal/domain/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// UsersSessionRepository is an autogenerated mock type for the UsersSessionRepository type
type UsersSessionRepository struct {
	mock.Mock
}

// CheckTokenWasInVoked provides a mock function with given fields: accessToken
func (_m *UsersSessionRepository) CheckTokenWasInVoked(accessToken string) bool {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for CheckTokenWasInVoked")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CheckUserInSession provides a mock function with given fields: userId
func (_m *UsersSessionRepository) CheckUserInSession(userId int64) bool {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserInSession")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Create provides a mock function with given fields: usersSessions, tx
func (_m *UsersSessionRepository) Create(usersSessions *entity.UsersSessions, tx *gorm.DB) error {
	ret := _m.Called(usersSessions, tx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.UsersSessions, *gorm.DB) error); ok {
		r0 = rf(usersSessions, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByRefreshToken provides a mock function with given fields: refreshToken
func (_m *UsersSessionRepository) FindByRefreshToken(refreshToken string) (*entity.UsersSessions, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for FindByRefreshToken")
	}

	var r0 *entity.UsersSessions
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.UsersSessions, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.UsersSessions); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UsersSessions)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIdInSession provides a mock function with given fields: UserId
func (_m *UsersSessionRepository) FindByUserIdInSession(UserId int64) (*entity.UsersSessions, error) {
	ret := _m.Called(UserId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserIdInSession")
	}

	var r0 *entity.UsersSessions
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.UsersSessions, error)); ok {
		return rf(UserId)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.UsersSessions); ok {
		r0 = rf(UserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UsersSessions)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(UserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIsRevoked provides a mock function with given fields: user
func (_m *UsersSessionRepository) UpdateIsRevoked(user *entity.UsersSessions) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIsRevoked")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.UsersSessions) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsersSessionRepository creates a new instance of UsersSessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersSessionRepository {
	mock := &UsersSessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
