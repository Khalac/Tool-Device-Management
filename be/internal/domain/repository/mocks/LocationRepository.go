// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "BE_Manage_device/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// LocationRepository is an autogenerated mock type for the LocationRepository type
type LocationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *LocationRepository) Create(_a0 *entity.Locations) (*entity.Locations, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Locations
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Locations) (*entity.Locations, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Locations) *entity.Locations); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Locations)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Locations) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *LocationRepository) Delete(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *LocationRepository) GetAll() ([]*entity.Locations, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*entity.Locations
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entity.Locations, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entity.Locations); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Locations)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLocationRepository creates a new instance of LocationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocationRepository {
	mock := &LocationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
