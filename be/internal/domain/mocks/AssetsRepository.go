// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "BE_Manage_device/internal/domain/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AssetsRepository is an autogenerated mock type for the AssetsRepository type
type AssetsRepository struct {
	mock.Mock
}

// CheckAssetFinishMaintenance provides a mock function with given fields: id
func (_m *AssetsRepository) CheckAssetFinishMaintenance(id int64) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CheckAssetFinishMaintenance")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: assets, tx
func (_m *AssetsRepository) Create(assets *entity.Assets, tx *gorm.DB) (*entity.Assets, error) {
	ret := _m.Called(assets, tx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Assets
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Assets, *gorm.DB) (*entity.Assets, error)); ok {
		return rf(assets, tx)
	}
	if rf, ok := ret.Get(0).(func(*entity.Assets, *gorm.DB) *entity.Assets); ok {
		r0 = rf(assets, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Assets)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Assets, *gorm.DB) error); ok {
		r1 = rf(assets, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *AssetsRepository) Delete(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAsset provides a mock function with given fields: id, tx
func (_m *AssetsRepository) DeleteAsset(id int64, tx *gorm.DB) error {
	ret := _m.Called(id, tx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *gorm.DB) error); ok {
		r0 = rf(id, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOwnerAssetOfOwnerId provides a mock function with given fields: ownerId
func (_m *AssetsRepository) DeleteOwnerAssetOfOwnerId(ownerId int64) error {
	ret := _m.Called(ownerId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOwnerAssetOfOwnerId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(ownerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllAsset provides a mock function with no fields
func (_m *AssetsRepository) GetAllAsset() ([]*entity.Assets, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAsset")
	}

	var r0 []*entity.Assets
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entity.Assets, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entity.Assets); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Assets)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetById provides a mock function with given fields: id
func (_m *AssetsRepository) GetAssetById(id int64) (*entity.Assets, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetById")
	}

	var r0 *entity.Assets
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Assets, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Assets); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Assets)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetByStatus provides a mock function with given fields: _a0
func (_m *AssetsRepository) GetAssetByStatus(_a0 string) ([]*entity.Assets, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetByStatus")
	}

	var r0 []*entity.Assets
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entity.Assets, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*entity.Assets); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Assets)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsByCateOfDepartment provides a mock function with given fields: categoryId, departmentId
func (_m *AssetsRepository) GetAssetsByCateOfDepartment(categoryId int64, departmentId int64) ([]*entity.Assets, error) {
	ret := _m.Called(categoryId, departmentId)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetsByCateOfDepartment")
	}

	var r0 []*entity.Assets
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]*entity.Assets, error)); ok {
		return rf(categoryId, departmentId)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []*entity.Assets); ok {
		r0 = rf(categoryId, departmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Assets)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(categoryId, departmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsWasWarrantyExpiry provides a mock function with no fields
func (_m *AssetsRepository) GetAssetsWasWarrantyExpiry() ([]*entity.Assets, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAssetsWasWarrantyExpiry")
	}

	var r0 []*entity.Assets
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entity.Assets, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entity.Assets); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Assets)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDB provides a mock function with no fields
func (_m *AssetsRepository) GetDB() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetUserHavePermissionNotifications provides a mock function with given fields: id
func (_m *AssetsRepository) GetUserHavePermissionNotifications(id int64) ([]*entity.Users, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserHavePermissionNotifications")
	}

	var r0 []*entity.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*entity.Users, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) []*entity.Users); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAcquisitionDate provides a mock function with given fields: id, AcquisitionDate
func (_m *AssetsRepository) UpdateAcquisitionDate(id int64, AcquisitionDate time.Time) error {
	ret := _m.Called(id, AcquisitionDate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAcquisitionDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, time.Time) error); ok {
		r0 = rf(id, AcquisitionDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAsset provides a mock function with given fields: asset, tx
func (_m *AssetsRepository) UpdateAsset(asset *entity.Assets, tx *gorm.DB) (*entity.Assets, error) {
	ret := _m.Called(asset, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsset")
	}

	var r0 *entity.Assets
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Assets, *gorm.DB) (*entity.Assets, error)); ok {
		return rf(asset, tx)
	}
	if rf, ok := ret.Get(0).(func(*entity.Assets, *gorm.DB) *entity.Assets); ok {
		r0 = rf(asset, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Assets)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Assets, *gorm.DB) error); ok {
		r1 = rf(asset, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssetDepartment provides a mock function with given fields: id, departmentId, tx
func (_m *AssetsRepository) UpdateAssetDepartment(id int64, departmentId int64, tx *gorm.DB) (*entity.Assets, error) {
	ret := _m.Called(id, departmentId, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetDepartment")
	}

	var r0 *entity.Assets
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, *gorm.DB) (*entity.Assets, error)); ok {
		return rf(id, departmentId, tx)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, *gorm.DB) *entity.Assets); ok {
		r0 = rf(id, departmentId, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Assets)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, *gorm.DB) error); ok {
		r1 = rf(id, departmentId, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssetLifeCycleStage provides a mock function with given fields: id, status, tx
func (_m *AssetsRepository) UpdateAssetLifeCycleStage(id int64, status string, tx *gorm.DB) (*entity.Assets, error) {
	ret := _m.Called(id, status, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetLifeCycleStage")
	}

	var r0 *entity.Assets
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, *gorm.DB) (*entity.Assets, error)); ok {
		return rf(id, status, tx)
	}
	if rf, ok := ret.Get(0).(func(int64, string, *gorm.DB) *entity.Assets); ok {
		r0 = rf(id, status, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Assets)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, *gorm.DB) error); ok {
		r1 = rf(id, status, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssetOwner provides a mock function with given fields: id, Owner, tx
func (_m *AssetsRepository) UpdateAssetOwner(id int64, Owner int64, tx *gorm.DB) (*entity.Assets, error) {
	ret := _m.Called(id, Owner, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssetOwner")
	}

	var r0 *entity.Assets
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, *gorm.DB) (*entity.Assets, error)); ok {
		return rf(id, Owner, tx)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, *gorm.DB) *entity.Assets); ok {
		r0 = rf(id, Owner, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Assets)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, *gorm.DB) error); ok {
		r1 = rf(id, Owner, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCost provides a mock function with given fields: id, cost
func (_m *AssetsRepository) UpdateCost(id int64, cost float64) error {
	ret := _m.Called(id, cost)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, float64) error); ok {
		r0 = rf(id, cost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOwner provides a mock function with given fields: id, ownerId, tx
func (_m *AssetsRepository) UpdateOwner(id int64, ownerId int64, tx *gorm.DB) error {
	ret := _m.Called(id, ownerId, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, *gorm.DB) error); ok {
		r0 = rf(id, ownerId, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateQrURL provides a mock function with given fields: assetId, qrUrl
func (_m *AssetsRepository) UpdateQrURL(assetId int64, qrUrl string) error {
	ret := _m.Called(assetId, qrUrl)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQrURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(assetId, qrUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAssetsRepository creates a new instance of AssetsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetsRepository {
	mock := &AssetsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
