// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "BE_Manage_device/internal/domain/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// RequestTransferRepository is an autogenerated mock type for the RequestTransferRepository type
type RequestTransferRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *RequestTransferRepository) Create(_a0 *entity.RequestTransfer) (*entity.RequestTransfer, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.RequestTransfer
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.RequestTransfer) (*entity.RequestTransfer, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.RequestTransfer) *entity.RequestTransfer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RequestTransfer)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.RequestTransfer) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDB provides a mock function with no fields
func (_m *RequestTransferRepository) GetDB() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetRequestTransferById provides a mock function with given fields: id
func (_m *RequestTransferRepository) GetRequestTransferById(id int64) (*entity.RequestTransfer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetRequestTransferById")
	}

	var r0 *entity.RequestTransfer
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.RequestTransfer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.RequestTransfer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RequestTransfer)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusConfirm provides a mock function with given fields: id, tx
func (_m *RequestTransferRepository) UpdateStatusConfirm(id int64, tx *gorm.DB) (*entity.RequestTransfer, error) {
	ret := _m.Called(id, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusConfirm")
	}

	var r0 *entity.RequestTransfer
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *gorm.DB) (*entity.RequestTransfer, error)); ok {
		return rf(id, tx)
	}
	if rf, ok := ret.Get(0).(func(int64, *gorm.DB) *entity.RequestTransfer); ok {
		r0 = rf(id, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RequestTransfer)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *gorm.DB) error); ok {
		r1 = rf(id, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusDeny provides a mock function with given fields: id, tx
func (_m *RequestTransferRepository) UpdateStatusDeny(id int64, tx *gorm.DB) (*entity.RequestTransfer, error) {
	ret := _m.Called(id, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusDeny")
	}

	var r0 *entity.RequestTransfer
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *gorm.DB) (*entity.RequestTransfer, error)); ok {
		return rf(id, tx)
	}
	if rf, ok := ret.Get(0).(func(int64, *gorm.DB) *entity.RequestTransfer); ok {
		r0 = rf(id, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RequestTransfer)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *gorm.DB) error); ok {
		r1 = rf(id, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRequestTransferRepository creates a new instance of RequestTransferRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestTransferRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestTransferRepository {
	mock := &RequestTransferRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
