// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "BE_Manage_device/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// MaintenanceNotificationsRepository is an autogenerated mock type for the MaintenanceNotificationsRepository type
type MaintenanceNotificationsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *MaintenanceNotificationsRepository) Create(_a0 *entity.MaintenanceNotifications) (*entity.MaintenanceNotifications, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.MaintenanceNotifications
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.MaintenanceNotifications) (*entity.MaintenanceNotifications, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.MaintenanceNotifications) *entity.MaintenanceNotifications); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MaintenanceNotifications)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.MaintenanceNotifications) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaintenanceNotificationByScheduleId provides a mock function with given fields: scheduleId
func (_m *MaintenanceNotificationsRepository) GetMaintenanceNotificationByScheduleId(scheduleId int64) (*entity.MaintenanceNotifications, error) {
	ret := _m.Called(scheduleId)

	if len(ret) == 0 {
		panic("no return value specified for GetMaintenanceNotificationByScheduleId")
	}

	var r0 *entity.MaintenanceNotifications
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.MaintenanceNotifications, error)); ok {
		return rf(scheduleId)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.MaintenanceNotifications); ok {
		r0 = rf(scheduleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MaintenanceNotifications)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(scheduleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMaintenanceNotificationsRepository creates a new instance of MaintenanceNotificationsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMaintenanceNotificationsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MaintenanceNotificationsRepository {
	mock := &MaintenanceNotificationsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
